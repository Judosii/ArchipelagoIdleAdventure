	#if nodePathToObjective.size() > 0:
		#get_node("Label").text = str(nodePathToObjective[0].name)
	#print("-----------------------------------------------------------")
	#print("Arrived at a node !")
	#velocity = Vector2(0,0)
	##print(GAMEMANAGER.HasCurrentNodeBeenExplored(travellingToNode))
	#if !GAMEMANAGER.HasCurrentNodeBeenExplored(travellingToNode):
		#print("Current node has NOT been explored !")
		#print("-> adding to game manager lists and updating")
		## Node has been explored before
		#GAMEMANAGER.RefreshLists(travellingToNode)
	#
	#if GAMEMANAGER.IsHintAvailable():
		#print("-> hinted location available to obtain !")
		##Is there a hint available to access ?
	#
	#if currentObjectiveNode != null && travellingToNode == nodePathToObjective[nodePathToObjective.size() -1]:
		#print("Arrived at objective ! \nStart exploring randomly again.")
		#currentObjectiveNode = null
		#nodePathToObjective.clear()
	#elif currentObjectiveNode != null :
		#print("character has an objective ! the objective is :", currentObjectiveNode.name)
		#nodePathToObjective.remove_at(0)
		#travellingToNode = nodePathToObjective[0]
		#return
	#
	#if currentObjectiveNode == null:
		#if NodeIsBranchingPath():
			#print("-> there are multiple paths ahead !")
			#travellingToNode = GAMEMANAGER.GetClosestUnexploredNode()
		#elif IsCurrentNodeNotADeadEnd() :
			#print("-> current node is not a dead end ! \n")
			#travellingToNode = GAMEMANAGER.GetClosestUnexploredNode()
			## Path is not a dead end, get next closest path
		#elif HasObtainedItem():
			#print("-> has, in fact, obtained item !\n")
			## Recalculate open paths
			## Also check for Go Mode
			#if GAMEMANAGER.IsGoMode():
				#print("character is go mode !")
				#set_physics_process(false)
			#elif GAMEMANAGER.CheckPreviouslyUnavailablePaths():
				#print("not go mode yet, checking a new path")
				#set_physics_process(false)
			#else:
				#print("need to wait for an item.")
				#set_physics_process(false)
				##Needs to wait for an item.
		#elif GAMEMANAGER.nodesUnexplored.size() > 0:
			#print("\nthere are currently ", GAMEMANAGER.nodesUnexplored.size(), " paths unexplored \n")
			#var closest = GAMEMANAGER.GetClosestUnexploredNode()
			#nodePathToObjective = GAMEMANAGER.RequestPath(travellingToNode,closest)
			#currentObjectiveNode = nodePathToObjective[0]
			## is at least 1 path explorable ?
		#else:
			#pass
			#print("\nthere are no longer any paths to go to. You are boned.")
			#set_physics_process(false)